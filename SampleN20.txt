PC       = 4194692
EPC      = 0
Cause    = 0
BadVAddr = 0
Status   = 805371664

HI       = 0
LO       = 0

R0  [r0] = 0
R1  [at] = 268500992
R2  [v0] = 10
R3  [v1] = 0
R4  [a0] = 268501321
R5  [a1] = 2147483156
R6  [a2] = 2147483164
R7  [a3] = 0
R8  [t0] = 10
R9  [t1] = 17711
R10 [t2] = 10946
R11 [t3] = 21
R12 [t4] = 36
R13 [t5] = 6765
R14 [t6] = 10946
R15 [t7] = 0
R16 [s0] = 0
R17 [s1] = 0
R18 [s2] = 0
R19 [s3] = 0
R20 [s4] = 0
R21 [s5] = 0
R22 [s6] = 0
R23 [s7] = 0
R24 [t8] = 1
R25 [t9] = 0
R26 [k0] = 0
R27 [k1] = 0
R28 [gp] = 268468224
R29 [sp] = 2147483152
R30 [s8] = 0
R31 [ra] = 4194328


User Text Segment [00400000]..[00440000]
[00400000] 8fa40000  lw $4, 0($29)            ; 183: lw $a0 0($sp) # argc 
[00400004] 27a50004  addiu $5, $29, 4         ; 184: addiu $a1 $sp 4 # argv 
[00400008] 24a60004  addiu $6, $5, 4          ; 185: addiu $a2 $a1 4 # envp 
[0040000c] 00041080  sll $2, $4, 2            ; 186: sll $v0 $a0 2 
[00400010] 00c23021  addu $6, $6, $2          ; 187: addu $a2 $a2 $v0 
[00400014] 0c100009  jal 0x00400024 [main]    ; 188: jal main 
[00400018] 00000000  nop                      ; 189: nop 
[0040001c] 3402000a  ori $2, $0, 10           ; 191: li $v0 10 
[00400020] 0000000c  syscall                  ; 192: syscall # syscall 10 (exit) 
[00400024] 34080000  ori $8, $0, 0            ; 30: li $t0, 0 # Counter (count = 0) 
[00400028] 34090000  ori $9, $0, 0            ; 31: li $t1, 0 # Current Fibonacci Number if n 
[0040002c] 340a0000  ori $10, $0, 0           ; 32: li $t2, 0 # Current Fibonacci Number if n >= 2 (num2 = 0) 
[00400030] 34020004  ori $2, $0, 4            ; 35: li $v0, 4 
[00400034] 3c011001  lui $1, 4097 [promptN]   ; 36: la $a0, promptN 
[00400038] 342400c8  ori $4, $1, 200 [promptN] 
[0040003c] 0000000c  syscall                  ; 37: syscall 
[00400040] 34020005  ori $2, $0, 5            ; 38: li $v0, 5 
[00400044] 0000000c  syscall                  ; 39: syscall 
[00400048] 00025821  addu $11, $0, $2         ; 40: move $t3, $v0 # Store n in $t3 
[0040004c] 3401002e  ori $1, $0, 46           ; 42: beq $t3, 46, endInput # If n == 46 
[00400050] 102b000b  beq $1, $11, 44 [endInput-0x00400050] 
[00400054] 296f002e  slti $15, $11, 46        ; 44: slti $t7, $t3, 46 # $t7 = n 
[00400058] 000bc02a  slt $24, $0, $11         ; 45: slt $t8, $zero, $t3 # $t8 = 0 
[0040005c] 01f87824  and $15, $15, $24        ; 46: and $t7, $t7, $t8 # $t7 = (n 
[00400060] 34010001  ori $1, $0, 1            ; 47: beq $t7, 1, endInput # if $t7 == 1 
[00400064] 102f0006  beq $1, $15, 24 [endInput-0x00400064] 
[00400068] 34020004  ori $2, $0, 4            ; 49: li $v0, 4 
[0040006c] 3c011001  lui $1, 4097 [invalidN]  ; 50: la $a0, invalidN 
[00400070] 342400f2  ori $4, $1, 242 [invalidN] 
[00400074] 0000000c  syscall                  ; 51: syscall 
[00400078] 0810000c  j 0x00400030 [initializeN]; 52: j initializeN 
[0040007c] 34020004  ori $2, $0, 4            ; 56: li $v0, 4 # Print String 
[00400080] 3c011001  lui $1, 4097 [newLine]   ; 57: la $a0, newLine 
[00400084] 3424014f  ori $4, $1, 335 [newLine] 
[00400088] 0000000c  syscall                  ; 58: syscall 
[0040008c] 216b0001  addi $11, $11, 1         ; 60: addi $t3, $t3, 1 # Add 1 to n for easier looping 
[00400090] 010b782a  slt $15, $8, $11         ; 63: slt $t7, $t0, $t3 # $t7 = 1 if count 
[00400094] 34010001  ori $1, $0, 1            ; 64: bne $t7, 1, EndLoop # if $t7 != 1, branch to EndLoop 
[00400098] 142f0017  bne $1, $15, 92 [EndLoop-0x00400098] 
[0040009c] 00086080  sll $12, $8, 2           ; 66: sll $t4, $t0, 2 # $t4 is the offset for the array. $t4 = $t0 * 2 
[004000a0] 290f0002  slti $15, $8, 2          ; 68: slti $t7, $t0, 2 # $t7 = 1 if count 
[004000a4] 34010001  ori $1, $0, 1            ; 69: beq $t7, 1, FirstTwoFib # if (count 
[004000a8] 102f0002  beq $1, $15, 8 [FirstTwoFib-0x004000a8] 
[004000ac] 100f0009  beq $0, $15, 36 [Fibonacci-0x004000ac]
[004000b0] 00096821  addu $13, $0, $9         ; 73: move $t5, $t1 # $t5 holds the nth Fibonacci number when (n 
[004000b4] 3c011001  lui $1, 4097             ; 74: sw $t5, array($t4) # Store the current Fibonacci number into the correct array index 
[004000b8] 002c0821  addu $1, $1, $12         
[004000bc] ac2d0000  sw $13, 0($1)            
[004000c0] 00095021  addu $10, $0, $9         ; 76: move $t2, $t1 # num2 = num1 
[004000c4] 25290001  addiu $9, $9, 1          ; 77: addiu $t1, $t1, 1 # num1++ 
[004000c8] 25080001  addiu $8, $8, 1          ; 78: addiu $t0, $t0, 1 # count++ 
[004000cc] 08100024  j 0x00400090 [Loop]      ; 80: j Loop 
[004000d0] 01406821  addu $13, $10, $0        ; 83: addu $t5, $t2, $zero # $t5 holds the nth Fibonacci number when (n >= 2) 
[004000d4] 3c011001  lui $1, 4097             ; 84: sw $t5, array($t4) # Store the current Fibonacci number into the correct array index 
[004000d8] 002c0821  addu $1, $1, $12         
[004000dc] ac2d0000  sw $13, 0($1)            
[004000e0] 01207021  addu $14, $9, $0         ; 86: addu $t6, $t1, $zero # temp = num1 
[004000e4] 012a4821  addu $9, $9, $10         ; 87: addu $t1, $t1, $t2 # num1 = num1 + num2 
[004000e8] 01c05021  addu $10, $14, $0        ; 88: addu $t2, $t6, $zero # num2 = temp 
[004000ec] 25080001  addiu $8, $8, 1          ; 89: addiu $t0, $t0, 1 # count++ 
[004000f0] 08100024  j 0x00400090 [Loop]      ; 91: j Loop 
[004000f4] 34020004  ori $2, $0, 4            ; 95: li $v0, 4 # Print String 
[004000f8] 3c011001  lui $1, 4097 [printN]    ; 96: la $a0, printN 
[004000fc] 34240108  ori $4, $1, 264 [printN] 
[00400100] 0000000c  syscall                  ; 97: syscall 
[00400104] 34020001  ori $2, $0, 1            ; 99: li $v0, 1 # Print Integer 
[00400108] 000d2021  addu $4, $0, $13         ; 100: move $a0, $t5 
[0040010c] 0000000c  syscall                  ; 101: syscall 
[00400110] 34080000  ori $8, $0, 0            ; 103: li $t0, 0 
[00400114] 34020004  ori $2, $0, 4            ; 105: li $v0, 4 # Print String 
[00400118] 3c011001  lui $1, 4097 [newLine]   ; 106: la $a0, newLine 
[0040011c] 3424014f  ori $4, $1, 335 [newLine] 
[00400120] 0000000c  syscall                  ; 107: syscall 
[00400124] 3c011001  lui $1, 4097 [sequence]  ; 109: la $a0, sequence 
[00400128] 34240136  ori $4, $1, 310 [sequence] 
[0040012c] 0000000c  syscall                  ; 110: syscall 
[00400130] 290f000a  slti $15, $8, 10         ; 113: slti $t7, $t0, 10 
[00400134] 110b000f  beq $8, $11, 60 [Exit-0x00400134]
[00400138] 100f000e  beq $0, $15, 56 [Exit-0x00400138]
[0040013c] 00086080  sll $12, $8, 2           ; 117: sll $t4, $t0, 2 
[00400140] 3c011001  lui $1, 4097             ; 119: lw $t7, array($t4) # Load word at the current index into $t1 
[00400144] 002c0821  addu $1, $1, $12         
[00400148] 8c2f0000  lw $15, 0($1)            
[0040014c] 34020001  ori $2, $0, 1            ; 120: li $v0, 1 # $v0 = print integer 
[00400150] 000f2021  addu $4, $0, $15         ; 121: move $a0, $t7 # $a0 = value at $t1 
[00400154] 0000000c  syscall                  ; 122: syscall # Print integer 
[00400158] 34020004  ori $2, $0, 4            ; 124: li $v0, 4 # $v0 = Print String 
[0040015c] 3c011001  lui $1, 4097 [addspace]  ; 125: la $a0, addspace # Spaces between each value 
[00400160] 3424014d  ori $4, $1, 333 [addspace] 
[00400164] 0000000c  syscall                  ; 126: syscall 
[00400168] 21080001  addi $8, $8, 1           ; 128: add $t0, $t0, 1 # Move $t0 4 bits 
[0040016c] 0810004c  j 0x00400130 [DisplayPartialSequence]
[00400170] 34020004  ori $2, $0, 4            ; 131: li $v0, 4 # Print String 
[00400174] 3c011001  lui $1, 4097 [tripleDot] ; 132: la $a0, tripleDot 
[00400178] 34240149  ori $4, $1, 329 [tripleDot] 
[0040017c] 0000000c  syscall                  ; 133: syscall 
[00400180] 3402000a  ori $2, $0, 10           ; 135: li $v0, 10 # terminate the program 
[00400184] 0000000c  syscall                  ; 136: syscall 

Kernel Text Segment [80000000]..[80010000]
[80000180] 0001d821  addu $27, $0, $1         ; 90: move $k1 $at # Save $at 
[80000184] 3c019000  lui $1, -28672           ; 92: sw $v0 s1 # Not re-entrant and we can't trust $sp 
[80000188] ac220200  sw $2, 512($1)           
[8000018c] 3c019000  lui $1, -28672           ; 93: sw $a0 s2 # But we need to use these registers 
[80000190] ac240204  sw $4, 516($1)           
[80000194] 401a6800  mfc0 $26, $13            ; 95: mfc0 $k0 $13 # Cause register 
[80000198] 001a2082  srl $4, $26, 2           ; 96: srl $a0 $k0 2 # Extract ExcCode Field 
[8000019c] 3084001f  andi $4, $4, 31          ; 97: andi $a0 $a0 0x1f 
[800001a0] 34020004  ori $2, $0, 4            ; 101: li $v0 4 # syscall 4 (print_str) 
[800001a4] 3c049000  lui $4, -28672 [__m1_]   ; 102: la $a0 __m1_ 
[800001a8] 0000000c  syscall                  ; 103: syscall 
[800001ac] 34020001  ori $2, $0, 1            ; 105: li $v0 1 # syscall 1 (print_int) 
[800001b0] 001a2082  srl $4, $26, 2           ; 106: srl $a0 $k0 2 # Extract ExcCode Field 
[800001b4] 3084001f  andi $4, $4, 31          ; 107: andi $a0 $a0 0x1f 
[800001b8] 0000000c  syscall                  ; 108: syscall 
[800001bc] 34020004  ori $2, $0, 4            ; 110: li $v0 4 # syscall 4 (print_str) 
[800001c0] 3344003c  andi $4, $26, 60         ; 111: andi $a0 $k0 0x3c 
[800001c4] 3c019000  lui $1, -28672           ; 112: lw $a0 __excp($a0) 
[800001c8] 00240821  addu $1, $1, $4          
[800001cc] 8c240180  lw $4, 384($1)           
[800001d0] 00000000  nop                      ; 113: nop 
[800001d4] 0000000c  syscall                  ; 114: syscall 
[800001d8] 34010018  ori $1, $0, 24           ; 116: bne $k0 0x18 ok_pc # Bad PC exception requires special checks 
[800001dc] 143a0008  bne $1, $26, 32 [ok_pc-0x800001dc] 
[800001e0] 00000000  nop                      ; 117: nop 
[800001e4] 40047000  mfc0 $4, $14             ; 119: mfc0 $a0 $14 # EPC 
[800001e8] 30840003  andi $4, $4, 3           ; 120: andi $a0 $a0 0x3 # Is EPC word-aligned? 
[800001ec] 10040004  beq $0, $4, 16 [ok_pc-0x800001ec]
[800001f0] 00000000  nop                      ; 122: nop 
[800001f4] 3402000a  ori $2, $0, 10           ; 124: li $v0 10 # Exit on really bad PC 
[800001f8] 0000000c  syscall                  ; 125: syscall 
[800001fc] 34020004  ori $2, $0, 4            ; 128: li $v0 4 # syscall 4 (print_str) 
[80000200] 3c019000  lui $1, -28672 [__m2_]   ; 129: la $a0 __m2_ 
[80000204] 3424000d  ori $4, $1, 13 [__m2_]   
[80000208] 0000000c  syscall                  ; 130: syscall 
[8000020c] 001a2082  srl $4, $26, 2           ; 132: srl $a0 $k0 2 # Extract ExcCode Field 
[80000210] 3084001f  andi $4, $4, 31          ; 133: andi $a0 $a0 0x1f 
[80000214] 14040002  bne $0, $4, 8 [ret-0x80000214]; 134: bne $a0 0 ret # 0 means exception was an interrupt 
[80000218] 00000000  nop                      ; 135: nop 
[8000021c] 401a7000  mfc0 $26, $14            ; 145: mfc0 $k0 $14 # Bump EPC register 
[80000220] 275a0004  addiu $26, $26, 4        ; 146: addiu $k0 $k0 4 # Skip faulting instruction 
[80000224] 409a7000  mtc0 $26, $14            ; 148: mtc0 $k0 $14 
[80000228] 3c019000  lui $1, -28672           ; 153: lw $v0 s1 # Restore other registers 
[8000022c] 8c220200  lw $2, 512($1)           
[80000230] 3c019000  lui $1, -28672           ; 154: lw $a0 s2 
[80000234] 8c240204  lw $4, 516($1)           
[80000238] 001b0821  addu $1, $0, $27         ; 157: move $at $k1 # Restore $at 
[8000023c] 40806800  mtc0 $0, $13             ; 160: mtc0 $0 $13 # Clear Cause register 
[80000240] 401a6000  mfc0 $26, $12            ; 162: mfc0 $k0 $12 # Set Status register 
[80000244] 375a0001  ori $26, $26, 1          ; 163: ori $k0 0x1 # Interrupts enabled 
[80000248] 409a6000  mtc0 $26, $12            ; 164: mtc0 $k0 $12 
[8000024c] 42000018  eret                     ; 167: eret 


User data segment [10000000]..[10040000]
[10000000]..[10010003]  00000000
[10010004]    0000000001  0000000001  0000000002                . . . . . . . . . . . . 
[10010010]    0000000003  0000000005  0000000008  0000000013    . . . . . . . . . . . . . . . . 
[10010020]    0000000021  0000000034  0000000055  0000000089    . . . . " . . . 7 . . . Y . . . 
[10010030]    0000000144  0000000233  0000000377  0000000610    . . . . . . . . y . . . b . . . 
[10010040]    0000000987  0000001597  0000002584  0000004181    . . . . = . . . . . . . U . . . 
[10010050]    0000006765  0000000000  0000000000  0000000000    m . . . . . . . . . . . . . . . 
[10010060]..[100100c7]  00000000
[100100c8]    1702129221  1752440946                            E n t e r   t h 
[100100d0]    1635131493  0543520108  1847617135  1700931616    e   v a l u e   o f   n   ( b e 
[100100e0]    1701148532  0540024942  0543452769  0975779380    t w e e n   0   a n d   4 6 ) : 
[100100f0]    1850277920  1768710518  1635131492  0543520108      . I n v a l i d   v a l u e   
[10010100]    0544370534  0000667246  0543516756  0543716462    f o r   n . . . T h e   n t h   
[10010110]    1836213620  0544106784  0543516788  1868720454    t e r m   i n   t h e   F i b o 
[10010120]    1667457390  0544417641  1970365779  1701015141    n a c c i ' s   S e q u e n c e 
[10010130]    0980642080  1632632864  1634301042  1699946604      i s :   . P a r t i a l   S e 
[10010140]    1852142961  0540697955  0774778368  0167780352    q u e n c e :   . . . . .   . . 
[10010150]..[1003ffff]  00000000


User Stack [7ffffe10]..[80000000]
[7ffffe10]    0000000001  2147483215  0000000000  2147483591    . . . . O . . . . . . . . . . . 
[7ffffe20]    2147483553  2147483537  2147483517  2147483441    . . . . . . . . } . . . 1 . . . 
[7ffffe30]    2147483375  2147483340  2147483324  2147483285    . . . . . . . . . . . . . . . . 
[7ffffe40]    2147483272  2147483258  0000000000  0805306257    . . . . z . . . . . . . . . . / 
[7ffffe50]    1919251285  1953705843  1852138613  1396911988    U s e r s / s t u d e n t / C S 
[7ffffe60]    0791950898  1785688656  0846488421  1869762607    2 6 4 / P r o j e c t 2 / P r o 
[7ffffe70]    1952671082  1935748658  1347944557  1279680323    j e c t 2 . a s m . X P C _ F L 
[7ffffe80]    1028867905  0003176496  1380275029  1970565949    A G S = 0 x 0 . U S E R = s t u 
[7ffffe90]    1953391972  1129338880  1380275039  1162037590    d e n t . X P C _ S E R V I C E 
[7ffffea0]    1296125535  1868774725  1634479725  0779318642    _ N A M E = c o m . l a r u s . 
[7ffffeb0]    1886614641  0892235113  0003682352  1313296204    q t s p i m . 5 0 0 8 . L O G N 
[7ffffec0]    1027951937  1685419123  0007630437  1213481296    A M E = s t u d e n t . P A T H 
[7ffffed0]    1937059645  1768042354  1647262318  0792358505    = / u s r / b i n : / b i n : / 
[7ffffee0]    0796029813  1852400243  1651715898  1392537193    u s r / s b i n : / s b i n . S 
[7ffffef0]    1096763475  1598575701  1262702419  1919954749    S H _ A U T H _ S O C K = / p r 
[7fffff00]    1952544361  1836330853  1868771184  1885417069    i v a t e / t m p / c o m . a p 
[7fffff10]    0778398832  1853186412  0778332259  1716941122    p l e . l a u n c h d . B q V f 
[7fffff20]    1446465079  1278177387  1702130537  1936876910    7 N 7 V k p / L i s t e n e r s 
[7fffff30]    1886404864  1348429164  1968398965  1867734882    . A p p l e _ P u b S u b _ S o 
[7fffff40]    1952803683  1852133983  1030907236  1769107503    c k e t _ R e n d e r = / p r i 
[7fffff50]    1702125942  1886221359  1836016431  1886413102    v a t e / t m p / c o m . a p p 
[7fffff60]    1814979948  1668183393  1127113832  1784901428    l e . l a u n c h d . C 4 o c j 
[7fffff70]    0876950642  1699884920  1919247470  1297041408    r 4 E 4 x / R e n d e r . H O M 
[7fffff80]    1429159237  1936876915  1970565935  1953391972    E = / U s e r s / s t u d e n t 
[7fffff90]    1162367744  0792546380  0795765090  1752392034    . S H E L L = / b i n / b a s h 
[7fffffa0]    1130323712  1398103878  1415533125  1599363141    . _ _ C F _ U S E R _ T E X T _ 
[7fffffb0]    1329811013  1196312900  0829960253  0809121350    E N C O D I N G = 0 x 1 F 6 : 0 
[7fffffc0]    0809119864  1409298552  1229213773  1982807378    x 0 : 0 x 0 . T M P D I R = / v 
[7fffffd0]    1714385505  1701080175  1848603506  0930492267    a r / f o l d e r s / n k / v 7 
[7fffffe0]    0959525942  1815378036  1919116138  0845314612    6 4 1 9 t x 4 l j c c r 4 z b 2 
[7ffffff0]    1802528884  0808480115  1885810736  0003101743    t h p k s m 0 0 0 0 g p / T / . 


Kernel data segment [90000000]..[90010000]
[90000000]    2017796128  1953523043  0544108393  1668227072        E x c e p t i o n   .   o c 
[90000010]    1920103779  1629512805  1763730542  1919905383    c u r r e d   a n d   i g n o r 
[90000020]    0000681061  1230708768  1919251566  1953527154    e d . .     [ I n t e r r u p t 
[90000030]    0536879197  1280596768  0536894786  1280596768    ]   .     [ T L B ] .     [ T L 
[90000040]    0536894786  1280596768  0536894786  1682004768    B ] .     [ T L B ] .     [ A d 
[90000050]    1936028260  1919230067  0544370546  1763733097    d r e s s   e r r o r   i n   i 
[90000060]    0796160878  1635017060  1952802336  0542992483    n s t / d a t a   f e t c h ]   
[90000070]    1528832000  1919181889  0544437093  1869771365    .     [ A d d r e s s   e r r o 
[90000080]    1852383346  1869902624  0542991730  1528832000    r   i n   s t o r e ]   .     [ 
[90000090]    0543449410  1953721961  1952675186  0544108393    B a d   i n s t r u c t i o n   
[900000a0]    1919181921  1567847269  0538968096  1684095579    a d d r e s s ]   .     [ B a d 
[900000b0]    1952539680  1684086881  1936028260  0002121075      d a t a   a d d r e s s ]   . 
[900000c0]    1163599904  1919906418  0544106784  1668512115        [ E r r o r   i n   s y s c 
[900000d0]    1567386721  0538968096  1701986907  1869638497    a l l ]   .     [ B r e a k p o 
[900000e0]    1567911529  0538968096  1936020059  1702261349    i n t ]   .     [ R e s e r v e 
[900000f0]    1852383332  1970435187  1869182051  0002121070    d   i n s t r u c t i o n ]   . 
[90000100]    1528832000  1953067585  1952804200  1864393577    .     [ A r i t h m e t i c   o 
[90000110]    1718773110  1568108396  0538968096  1634882651    v e r f l o w ]   .     [ T r a 
[90000120]    0002121072  1528832000  1634692166  1735289204    p ]   . .     [ F l o a t i n g 
[90000130]    1768910880  0542995566  0536870912  1866685216      p o i n t ]   . . .     [ C o 
[90000140]    1668248176  0006107680  0536870912  1145920288    p r o c   2 ] . . . .     [ M D 
[90000150]    0006117453  1465589792  1751348321  0538968157    M X ] .     [ W a t c h ] .     
[90000160]    1667321179  1701734760  1701339936  0006122339    [ M a c h i n e   c h e c k ] . 
[90000170]    0000000000  1528832000  1751343427  0000023909    . . . . .     [ C a c h e ] . . 
[90000180]    1879048156  1879048141  1879048133  1879048125    $ . . . 3 . . . ; . . . C . . . 
[90000190]    1879048117  1879048079  1879048051  1879048022    K . . . q . . . . . . . . . . . 
[900001a0]    1879048000  1879047978  1879047962  1879047936    . . . . . . . . . . . . . . . . 
[900001b0]    1879047935  1879047910  1879047900  1879047899    . . . . . . . . $ . . . % . . . 
[900001c0]    1879047879  1879047878  1879047877  1879047864    9 . . . : . . . ; . . . H . . . 
[900001d0]    1879047863  1879047862  1879047861  1879047852    I . . . J . . . K . . . T . . . 
[900001e0]    1879047842  1879047824  1879047823  1879047822    ^ . . . p . . . q . . . r . . . 
[900001f0]    1879047821  1879047820  1879047819  1879047809    s . . . t . . . u . . . . . . . 
[90000200]..[9000ffff]  00000000


Enter the value of n (between 0 and 46): 20

The nth term in the Fibonacci's Sequence is: 6765
Partial Sequence: 0 1 1 2 3 5 8 13 21 34 ...